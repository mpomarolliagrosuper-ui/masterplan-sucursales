# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import numpy as np
import base64
import io
import re
from math import radians, sin, cos, sqrt, atan2
from datetime import datetime
import folium
from folium.plugins import MarkerCluster

st.set_page_config(page_title="MASTERPLAN SUCURSALES", page_icon="üìç", layout="wide")

PRIMARY = "#144D92"
ACCENT  = "#FF7A00"

LOGO_BASE64 = "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"

def inject_css():
    css = """
    <style>
      .stApp header { display: none; }
      .titlebar {
        display: flex; align-items: center; gap: 16px; margin-bottom: 8px;
        border-bottom: 3px solid {{ACCENT}}; padding-bottom: 8px;
      }
      .titlebar h1 {
        margin: 0; color: {{PRIMARY}};
        font-weight: 800; letter-spacing: 0.5px;
      }
      .btn-primary button {
        background: {{ACCENT}} !important; color: white !important; border: 0 !important;
      }
    </style>
""".replace("{{ACCENT}}", ACCENT).replace("{{PRIMARY}}", PRIMARY)
    st.markdown(css, unsafe_allow_html=True)

def show_header():
    inject_css()
    col1, col2 = st.columns([1,6])
    with col1:
        st.image(io.BytesIO(base64.b64decode(LOGO_BASE64)), use_column_width=True)
    with col2:
        st.markdown('<div class="titlebar"><h1>MASTERPLAN SUCURSALES</h1></div>', unsafe_allow_html=True)
        st.write("Aplicaci√≥n para calcular distancias Terreno‚ÄìCliente por Sucursal, con filtros de calidad y mapa interactivo.")

def clean_coord(val):
    if pd.isna(val):
        return None
    if isinstance(val, (int, float, np.floating)):
        return float(val)
    s = str(val).strip().replace(",", ".")
    s = re.sub(r"[^0-9\.\-\+]", "", s)
    try:
        return float(s)
    except:
        return None

def split_coords_cell(txt):
    if not isinstance(txt, str):
        return (None, None)
    s = txt.strip()
    s = re.sub(r"[()\s]+", "", s)
    parts = re.split(r"[;,]", s)
    parts = [p for p in parts if p]
    if len(parts) >= 2:
        return clean_coord(parts[0]), clean_coord(parts[1])
    return (None, None)

def valido_en_chile(lat, lon):
    if lat is None or lon is None:
        return False
    return (-56 <= lat <= -17) and (-74.2 <= lon <= -66.5)

def haversine(lat1, lon1, lat2, lon2):
    R = 6371.0
    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    a = sin(dlat/2)**2 + cos(lat1)*cos(lat2)*sin(dlon/2)**2
    c = 2 * atan2(sqrt(1-a), sqrt(a))
    return R * c

def detect_cols_suc(df):
    cols = {c.strip().lower(): c for c in df.columns}
    col_sucursal = next((cols[k] for k in cols if "sucursal" in k), None)
    col_terreno = next((cols[k] for k in cols if "terreno" in k), None)
    col_lat = next((cols[k] for k in cols if k == "lat" or k.startswith("lat")), None)
    col_lon = next((cols[k] for k in cols if k in ["lon","long"] or k.startswith("lon") or k.startswith("long")), None)
    col_coord = next((cols[k] for k in cols if "coord" in k), None)
    return col_sucursal, col_terreno, col_lat, col_lon, col_coord

def detect_cols_cli(df):
    cols = {c.strip().lower(): c for c in df.columns}
    col_sucursal = next((cols[k] for k in cols if "sucursal" in k), None)
    col_lat = next((cols[k] for k in cols if k.startswith("lat")), None)
    col_lon = next((cols[k] for k in cols if k.startswith("lon") or k.startswith("long")), None)
    col_codlocal = next((cols[k] for k in cols if "cod" in k and "local" in k), None)
    col_local = next((cols[k] for k in cols if k == "local" or " local" in k), None)
    return col_sucursal, col_lat, col_lon, col_codlocal, col_local

def compute_distances(suc_df, cli_df, dmin_km, dmax_km):
    col_sucursal, col_terreno, col_lat, col_lon, col_coord = detect_cols_suc(suc_df)
    cs, clat, clon, ccod, clocal = detect_cols_cli(cli_df)
    if col_sucursal is None or col_terreno is None:
        raise ValueError("Faltan columnas en 'Sucursales' (Sucursal/Terreno).")
    if cs is None or clat is None or clon is None:
        raise ValueError("Faltan columnas en 'Clientes' (Sucursal/Latitud/Longitud).")

    s = suc_df.copy()
    s[col_sucursal] = s[col_sucursal].astype(str).str.strip()
    s[col_terreno] = s[col_terreno].astype(str).str.strip()
    if col_lat is None or col_lon is None:
        if col_coord is not None:
            s["__lat__"], s["__lon__"] = zip(*s[col_coord].apply(split_coords_cell))
            col_lat, col_lon = "__lat__", "__lon__"
        else:
            raise ValueError("No hay Lat/Lon ni 'Coordenadas' en 'Sucursales'.")
    s["Lat"] = s[col_lat].apply(clean_coord)
    s["Lon"] = s[col_lon].apply(clean_coord)
    s["Valido"] = s.apply(lambda r: valido_en_chile(r["Lat"], r["Lon"]), axis=1)
    s_valid = s[s["Valido"]].copy()
    s_excl = s[~s["Valido"]].copy()

    suc_valid_names = set(s_valid[col_sucursal].astype(str).str.strip().str.lower())
    c = cli_df.copy()
    c[cs] = c[cs].astype(str).str.strip()
    c = c[c[cs].str.lower().isin(suc_valid_names)].copy()
    c["Lat"] = c[clat].apply(clean_coord)
    c["Lon"] = c[clon].apply(clean_coord)
    c["Valido"] = c.apply(lambda r: valido_en_chile(r["Lat"], r["Lon"]), axis=1)
    c_valid = c[c["Valido"]].copy()
    c_excl  = c[~c["Valido"]].copy()

    rows = []
    for _, t in s_valid.iterrows():
        suc_name = t[col_sucursal]
        terr_name = t[col_terreno]
        lat_t, lon_t = t["Lat"], t["Lon"]
        sub = c_valid[c_valid[cs].str.lower() == suc_name.lower()]
        for _, r in sub.iterrows():
            d = haversine(lat_t, lon_t, r["Lat"], r["Lon"])
            rows.append({
                "Sucursal": suc_name,
                "Terreno": terr_name,
                "Cod Local": r.get(ccod, None) if ccod else None,
                "Local": r.get(clocal, None) if clocal else None,
                "Lat_Terreno": lat_t,
                "Lon_Terreno": lon_t,
                "Lat_Cliente": r["Lat"],
                "Lon_Cliente": r["Lon"],
                "Distancia_km": d
            })
    detalle = pd.DataFrame(rows)

    if detalle.empty:
        detalle_ok = detalle.copy()
        detalle_bad = detalle.copy()
    else:
        mask = (detalle["Distancia_km"] >= dmin_km) & (detalle["Distancia_km"] <= dmax_km)
        detalle_ok = detalle[mask].copy()
        detalle_bad = detalle[~mask].copy()

    if detalle_ok.empty:
        resumen = pd.DataFrame(columns=["Sucursal","Terreno","Promedio_km","Min_km","Max_km","Clientes"])
    else:
        resumen = (
            detalle_ok.groupby(["Sucursal","Terreno"])
            .agg(Promedio_km=("Distancia_km","mean"),
                 Min_km=("Distancia_km","min"),
                 Max_km=("Distancia_km","max"),
                 Clientes=("Distancia_km","count"))
            .reset_index()
        )

    cols_excl = ["Tipo","Sucursal","Terreno","Cod Local","Local","Lat","Lon","Lat_Cliente","Lon_Cliente","Distancia_km","Motivo"]
    terr_ex = pd.DataFrame(columns=cols_excl)
    if not s_excl.empty:
        terr_ex = pd.DataFrame({
            "Tipo": "Terreno",
            "Sucursal": s_excl[col_sucursal].astype(str).values,
            "Terreno": s_excl[col_terreno].astype(str).values,
            "Cod Local": [None]*len(s_excl),
            "Local": [None]*len(s_excl),
            "Lat": s_excl["Lat"].values,
            "Lon": s_excl["Lon"].values,
            "Lat_Cliente": [None]*len(s_excl),
            "Lon_Cliente": [None]*len(s_excl),
            "Distancia_km": [None]*len(s_excl),
            "Motivo": ["Coordenadas de terreno inv√°lidas/fuera de zona"]*len(s_excl)
        }, columns=cols_excl)

    cli_ex = pd.DataFrame(columns=cols_excl)
    if not c_excl.empty:
        cli_ex = pd.DataFrame({
            "Tipo": "Cliente",
            "Sucursal": c_excl[cs].astype(str).values,
            "Terreno": [None]*len(c_excl),
            "Cod Local": c_excl.get("Cod Local", pd.Series([None]*len(c_excl))).values if "Cod Local" in c_excl.columns else [None]*len(c_excl),
            "Local": c_excl.get("Local", pd.Series([None]*len(c_excl))).values if "Local" in c_excl.columns else [None]*len(c_excl),
            "Lat": [None]*len(c_excl),
            "Lon": [None]*len(c_excl),
            "Lat_Cliente": c_excl["Lat"].values,
            "Lon_Cliente": c_excl["Lon"].values,
            "Distancia_km": [None]*len(c_excl),
            "Motivo": ["Coordenadas de cliente inv√°lidas/fuera de zona"]*len(c_excl)
        }, columns=cols_excl)

    dist_ex = pd.DataFrame(columns=cols_excl)
    if not detalle_bad.empty:
        motivos = [("Distancia < {0:.1f} km".format(dmin_km) if d < dmin_km else "Distancia > {0:.0f} km".format(dmax_km)) for d in detalle_bad["Distancia_km"]]
        dist_ex = pd.DataFrame({
            "Tipo": "Distancia at√≠pica",
            "Sucursal": detalle_bad["Sucursal"].values,
            "Terreno": detalle_bad["Terreno"].values,
            "Cod Local": detalle_bad.get("Cod Local").values,
            "Local": detalle_bad.get("Local").values,
            "Lat": detalle_bad["Lat_Terreno"].values,
            "Lon": detalle_bad["Lon_Terreno"].values,
            "Lat_Cliente": detalle_bad["Lat_Cliente"].values,
            "Lon_Cliente": detalle_bad["Lon_Cliente"].values,
            "Distancia_km": detalle_bad["Distancia_km"].values,
            "Motivo": motivos
        }, columns=cols_excl)

    excluidos = pd.concat([terr_ex, cli_ex, dist_ex], ignore_index=True)

    return detalle_ok, resumen, excluidos

def build_map(detalle_ok):
    m = folium.Map(location=[-33.45, -70.65], zoom_start=5, control_scale=True)
    if detalle_ok.empty:
        return m
    terr = detalle_ok.groupby(["Sucursal","Terreno"], as_index=False).agg(
        Lat_Terreno=("Lat_Terreno","median"),
        Lon_Terreno=("Lon_Terreno","median"),
        Clientes=("Cod Local","count")
    )
    cluster = MarkerCluster(name="Clientes").add_to(m)
    for _, row in terr.iterrows():
        folium.CircleMarker(
            location=[row["Lat_Terreno"], row["Lon_Terreno"]],
            radius=8, color="#C0392B", fill=True, fill_opacity=0.9,
            popup=folium.Popup(f"<b>Terreno:</b> {row['Terreno']}<br><b>Sucursal:</b> {row['Sucursal']}<br><b>Clientes v√°lidos:</b> {row['Clientes']}", max_width=300)
        ).add_to(m)
    for _, r in detalle_ok.iterrows():
        folium.CircleMarker(
            location=[r["Lat_Cliente"], r["Lon_Cliente"]],
            radius=3, color="#1F77B4", fill=True, fill_opacity=0.7,
            popup=folium.Popup(f"<b>Cliente:</b> {r.get('Local','')}<br><b>Cod:</b> {r.get('Cod Local','')}<br><b>Distancia:</b> {r['Distancia_km']:.2f} km<br><b>Terreno:</b> {r['Terreno']}<br><b>Sucursal:</b> {r['Sucursal']}", max_width=280)
        ).add_to(cluster)
    folium.LayerControl().add_to(m)
    return m

def to_excel_bytes(detalle, resumen, excluidos):
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        detalle.to_excel(writer, sheet_name="Distancias_detalle", index=False)
        resumen.to_excel(writer, sheet_name="Resumen_terrenos", index=False)
        excluidos.to_excel(writer, sheet_name="Excluidos", index=False)
    output.seek(0)
    return output.getvalue()

show_header()
with st.sidebar:
    st.subheader("‚öôÔ∏è Par√°metros")
    dmin = st.number_input("Distancia m√≠nima (km)", min_value=0.0, value=0.2, step=0.1)
    dmax = st.number_input("Distancia m√°xima (km)", min_value=1.0, value=154.0, step=1.0)
    st.subheader("üìÑ Subir archivo")
    file = st.file_uploader("Cargar Excel con hojas 'Sucursales' y 'Clientes'", type=["xlsx"])

if file is None:
    st.info("Sube el archivo Excel para comenzar.", icon="üìé")
else:
    try:
        xl = pd.ExcelFile(file)
        suc = pd.read_excel(xl, sheet_name="Sucursales")
        cli = pd.read_excel(xl, sheet_name="Clientes")
        detalle_ok, resumen, excluidos = compute_distances(suc, cli, dmin, dmax)
        c1, c2, c3 = st.columns(3)
        with c1:
            st.metric("Terrenos v√°lidos", resumen["Terreno"].nunique() if not resumen.empty else 0)
        with c2:
            st.metric("Clientes v√°lidos", detalle_ok["Cod Local"].nunique() if "Cod Local" in detalle_ok.columns and not detalle_ok.empty else len(detalle_ok))
        with c3:
            st.metric("Distancia promedio (km)", f"{resumen['Promedio_km'].mean():.2f}" if not resumen.empty else "‚Äî")
        tab1, tab2, tab3, tab4 = st.tabs(["üó∫Ô∏è Mapa", "üìã Resumen por terreno", "üìÑ Detalle", "üö´ Excluidos"])
        with tab1:
            st.write("Vista de terrenos (rojo) y clientes (azul).")
            from streamlit_folium import st_folium
            m = build_map(detalle_ok)
            st_folium(m, width=None, height=600)
        with tab2:
            st.dataframe(resumen, use_container_width=True)
        with tab3:
            st.dataframe(detalle_ok, use_container_width=True)
        with tab4:
            st.dataframe(excluidos, use_container_width=True)
        excel_bytes = to_excel_bytes(detalle_ok, resumen, excluidos)
        fname = f"Resultados_Masterplan_{datetime.now().strftime('%Y%m%d')}.xlsx"
        st.download_button("üìä Descargar Resultados en Excel", data=excel_bytes, file_name=fname, mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", type="primary", key="dl_xlsx")
    except Exception as e:
        st.error(f"Ocurri√≥ un error procesando el archivo: {e}")
